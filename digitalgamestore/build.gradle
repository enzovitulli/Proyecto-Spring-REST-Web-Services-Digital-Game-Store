plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'dws'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Each dependency is commented in order to know what they do and why they're needed in a web application like this:

	/* Spring Web:
	Provides tools and libraries for building web applications. 
	Allows the creation of controllers and handles HTTP requests and responses. */
	implementation 'org.springframework.boot:spring-boot-starter-web'

	/* Spring Data JPA:
	Reduces boilerplate code for database interactions.
	You can define Repository interfaces, eliminating the need for explicit DAO classes.
	Instead of writing SQL queries and DAO classes, Spring Data JPA handles CRUD operations for entities */
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	/* Docker Compose:
	Looks for any docker-compose.yml file in the project folder structure and starts it automatically
	when running the application. The default behavior is to start and stop the container, 
	but it can be modified to just start it or do none as well. 
	It also allows many other settings defined in application.properties*/
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

	/* MariaDB Driver:
	Provides the necessary driver to connect to the mariadb database */
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}