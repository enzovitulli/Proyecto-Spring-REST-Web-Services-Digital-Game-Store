package dws.entities;

import jakarta.persistence.*;

@Entity // This marks the Transaction class as a JPA entity. An entity is a Java class that maps to a table in a database.
@Table(name = "Transaction") // Explicitly setting the names so they match the ones in the database. Otherwise Hibernate duplicates them in lowercase.
public class Transaction {
    @Id // This marks the transactionId field as the PK of the Game table. JPA requires every entity to have a field annotated with @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int transactionId;
    /* The GenerationType.IDENTITY strategy means:
     * - The database will handle generating the PK when inserting a new row (using an auto-increment column in the DB).
     * - When saving a new User object, there's no need to manually set the userIdâ€”it will be generated by the DB.
     */
    
    @ManyToOne(fetch = FetchType.EAGER) // Many transactions belong to one user
    @JoinColumn(name = "user_id", nullable = false)
    private User user; 
 
    @ManyToOne(fetch = FetchType.EAGER) // Many transactions belong to one game
    @JoinColumn(name = "game_id", nullable = false)
    private Game game;

    @Column(nullable = false, columnDefinition = "ENUM('Purchase', 'Lease')")
    private String transactionType;

    @Column(nullable = false, columnDefinition = "DATE")
    private String transactionDate;

    @Column(columnDefinition = "DATE")
    private String expiryDate;

    @Column(nullable = false, columnDefinition = "DECIMAL(10,2)")
    private double amount;

    /* How is the @Column annotation used and why does it differ in each attribute?
     * 
     * The @Column annotation in JPA is used to customize the mapping between an entity's 
     * attributes and the corresponding columns in the database table. It allows you to:
     * 
     * - Explicitly set the column name in the database, overriding the default naming strategy.
     * - Define column-specific properties, such as type, length, or nullable constraints.
     * 
     * By default, if @Column is not used, Spring (via Hibernate) automatically generates 
     * database columns for all attributes in an entity.
     *
     * The column names are by default written in lowercase, and variables with names written in 
     * camelCase are converted into snake_case, which aligns with database naming conventions.
     * For example:
     * `accountBalance` will become `account_balance` in the database.
     * 
     * This default behavior eliminates the need to use @Column in every attribute, unless:
     * 1. A specific name is required to match an existing database schema.
     * 2. A column needs explicit configuration (e.g., length, precision, nullable).
     * 
     * It's important to note that, using the annotation or not, the columns 
     * generated will appear in alphabetical order after primary and foreign keys.
     * 
     * However, column order is irrelevant when interacting with the database 
     * through Spring JPA, as the ORM maps fields by name rather than position.
     * 
     * In this application, the primary purpose of using the @Column annotation
     * is to explicitly define the column type and set nullable constrains.
     * For example:
     * - A `double` attribute in the entity would default to `DOUBLE` in the database 
     * unless we explicitly specify it as `DECIMAL`.
     * 
     * - A `String` attribute might need to be mapped to a `DATE` column type in the database.
     * 
     * - A column established as NOT NULL in the database scheme has to have the nullable 
     * boolean attribute set to `false`. 
     */

    // Constructors
    public Transaction() {
    }

    public Transaction(User user, Game game, String transactionType,
            String transactionDate, String expiryDate, double amount) {
        this.user = user;
        this.game = game;
        this.transactionType = transactionType;
        this.transactionDate = transactionDate;
        this.expiryDate = expiryDate;
        this.amount = amount;
    }

    // Getters and Setters
    /**
     * @return the transactionId
     */
    public int getTransactionId() {
        return transactionId;
    }

    /**
     * @param transactionId the transactionId to set
     */
    public void setTransactionId(int transactionId) {
        this.transactionId = transactionId;
    }

    /**
     * @return the user who made this transaction
     */
    public User getUser() {
        return user;
    }

    /**
     * @param user the user to set who made this transaction
     */
    public void setUser(User user) {
        this.user = user;
    }

    /**
     * @return the game associated with this transaction
     */
    public Game getGame() {
        return game;
    }

    /**
     * @param game the game to set associated with this transaction
     */
    public void setGame(Game game) {
        this.game = game;
    }

    /**
     * @return the transactionType
     */
    public String getTransactionType() {
        return transactionType;
    }

    /**
     * @param transactionType the transactionType to set
     */
    public void setTransactionType(String transactionType) {
        this.transactionType = transactionType;
    }

    /**
     * @return the transactionDate
     */
    public String getTransactionDate() {
        return transactionDate;
    }

    /**
     * @param transactionDate the transactionDate to set
     */
    public void setTransactionDate(String transactionDate) {
        this.transactionDate = transactionDate;
    }

    /**
     * @return the expiryDate
     */
    public String getExpiryDate() {
        return expiryDate;
    }

    /**
     * @param expiryDate the expiryDate to set
     */
    public void setExpiryDate(String expiryDate) {
        this.expiryDate = expiryDate;
    }

    /**
     * @return the amount
     */
    public double getAmount() {
        return amount;
    }

    /**
     * @param amount the amount to set
     */
    public void setAmount(double amount) {
        this.amount = amount;
    }

}
