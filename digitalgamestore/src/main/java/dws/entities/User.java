package dws.entities;

import jakarta.persistence.*;

@Entity // This marks the User class as a JPA entity. An entity is a Java class that maps to a table in a database.
@Table(name = "User") // Explicitly setting the names so they match the ones in the database. Otherwise Hibernate duplicates them in lowercase.
public class User {
    @Id // This marks the userId field as the PK of the User table. JPA requires every entity to have a field annotated with @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // This tells JPA how to generate values for the userId PK automatically.
    private int userId;
    /* The GenerationType.IDENTITY strategy means:
     * - The database will handle generating the PK when inserting a new row (using an auto-increment column in the DB).
     * - When saving a new User object, there's no need to manually set the userIdâ€”it will be generated by the DB.
     */
    
    @Column(nullable = false)
    private String username;

    @Column(nullable = false)
    private String email;

    @Column(nullable = false)
    private String password;

    @Column(nullable = false, columnDefinition = "DECIMAL(10,2)")
    private double accountBalance;

    /* How is the @Column annotation used and why does it differ in each attribute?
     * 
     * The @Column annotation in JPA is used to customize the mapping between an entity's 
     * attributes and the corresponding columns in the database table. It allows you to:
     * 
     * - Explicitly set the column name in the database, overriding the default naming strategy.
     * - Define column-specific properties, such as type, length, or nullable constraints.
     * 
     * By default, if @Column is not used, Spring (via Hibernate) automatically generates 
     * database columns for all attributes in an entity.
     *
     * The column names are by default written in lowercase, and variables with names written in 
     * camelCase are converted into snake_case, which aligns with database naming conventions.
     * For example:
     * `accountBalance` will become `account_balance` in the database.
     * 
     * This default behavior eliminates the need to use @Column in every attribute, unless:
     * 1. A specific name is required to match an existing database schema.
     * 2. A column needs explicit configuration (e.g., length, precision, nullable).
     * 
     * It's important to note that, using the annotation or not, the columns 
     * generated will appear in alphabetical order after primary and foreign keys.
     * 
     * However, column order is irrelevant when interacting with the database 
     * through Spring JPA, as the ORM maps fields by name rather than position.
     * 
     * In this application, the primary purpose of using the @Column annotation
     * is to explicitly define the column type and set nullable constrains.
     * For example:
     * - A `double` attribute in the entity would default to `DOUBLE` in the database 
     * unless we explicitly specify it as `DECIMAL`.
     * 
     * - A `String` attribute might need to be mapped to a `DATE` column type in the database.
     * 
     * - A column established as NOT NULL in the database scheme has to have the nullable 
     * boolean attribute set to `false`. 
     */

    // Constructors
    public User() {
    }

    public User(String username, String email, String password) {
        // userId will be set automatically because of the database's AUTOINCREMENT
        this.username = username;
        this.email = email;
        this.password = password;
        this.accountBalance = 0.00; // accountBalance will always be 0.00 when creating a new User entry in the database
    }

    // Getters and Setters
    /**
     * @return the userId
     */
    public int getUserId() {
        return userId;
    }

    /**
     * @param userId the userId to set
     */
    public void setUserId(int userId) {
        this.userId = userId;
    }

    /**
     * @return the username
     */
    public String getUsername() {
        return username;
    }

    /**
     * @param username the username to set
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * @return the email
     */
    public String getEmail() {
        return email;
    }

    /**
     * @param email the email to set
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * @return the password
     */
    public String getPassword() {
        return password;
    }

    /**
     * @param password the password to set
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * @return the accountBalance
     */
    public double getAccountBalance() {
        return accountBalance;
    }

    /**
     * @param accountBalance the accountBalance to set
     */
    public void setAccountBalance(double accountBalance) {
        this.accountBalance = accountBalance;
    }

}
