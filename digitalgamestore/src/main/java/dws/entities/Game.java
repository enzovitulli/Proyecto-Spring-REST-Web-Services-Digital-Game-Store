package dws.entities;

import jakarta.persistence.*;

@Entity // This marks the Game class as a JPA entity. An entity is a Java class that maps to a table in a database.
@Table(name = "Game") // Explicitly setting the names so they match the ones in the database. Otherwise Hibernate duplicates them in lowercase.
public class Game {
    @Id // This marks the gameId field as the PK of the Game table. JPA requires every entity to have a field annotated with @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // This tells JPA how to generate values for the gameId PK automatically.
    private int gameId;
    /* The GenerationType.IDENTITY strategy means:
     * - The database will handle generating the PK when inserting a new row (using an auto-increment column in the DB).
     * - When saving a new User object, there's no need to manually set the userIdâ€”it will be generated by the DB.
     */
    
    @Column(nullable = false)
    private String title;

    @Column(nullable = false, columnDefinition = "SET('Action','Adventure','Arcade','Battle Royale','Beat ''em Up','Builder','Card','Casual','City Builder','Comedy','Cyberpunk','Dating Sim','Detective','Dungeon Crawler','Educational','Endless Runner','Exploration','Fantasy','Fighting','First-Person Shooter (FPS)','Hack and Slash','Historical','Horror','Idle','Interactive Story','JRPG','Life Simulation','Management','Massively Multiplayer Online (MMO)','Metroidvania','Military','Minigames','Music','Mystery','Narrative','Open World','Party','Pinball','Platformer','Post-Apocalyptic','Puzzle','Racing','Real-Time Strategy (RTS)','Retro','Rhythm','Roguelike','Roguelite','Role-Playing Game (RPG)','Sandbox','Sci-Fi','Shooter','Social','Sports','Stealth','Strategy','Survival','Survival Horror','Tactical','Third-Person Shooter','Tower Defense','Trading Card','Turn-Based Strategy (TBS)','Tycoon','Visual Novel')")
    private String genre;

    @Column(nullable = false)
    private String developer;
    
    @Column(nullable = false, columnDefinition = "DATE")
    private String releaseDate;
    
    @Column(nullable = false, columnDefinition = "DECIMAL(10,2)")
    private double price;
    
    @Column(nullable = false, columnDefinition = "DECIMAL(10,2)")
    private double leasePrice;
    
    @Column(nullable = false, columnDefinition = "TEXT")
    private String description;
    
    /* How is the @Column annotation used and why does it differ in each attribute?
     * 
     * The @Column annotation in JPA is used to customize the mapping between an entity's 
     * attributes and the corresponding columns in the database table. It allows you to:
     * 
     * - Explicitly set the column name in the database, overriding the default naming strategy.
     * - Define column-specific properties, such as type, length, or nullable constraints.
     * 
     * By default, if @Column is not used, Spring (via Hibernate) automatically generates 
     * database columns for all attributes in an entity.
     *
     * The column names are by default written in lowercase, and variables with names written in 
     * camelCase are converted into snake_case, which aligns with database naming conventions.
     * For example:
     * `accountBalance` will become `account_balance` in the database.
     * 
     * This default behavior eliminates the need to use @Column in every attribute, unless:
     * 1. A specific name is required to match an existing database schema.
     * 2. A column needs explicit configuration (e.g., length, precision, nullable).
     * 
     * It's important to note that, using the annotation or not, the columns 
     * generated will appear in alphabetical order after primary and foreign keys.
     * 
     * However, column order is irrelevant when interacting with the database 
     * through Spring JPA, as the ORM maps fields by name rather than position.
     * 
     * In this application, the primary purpose of using the @Column annotation
     * is to explicitly define the column type and set nullable constrains.
     * For example:
     * - A `double` attribute in the entity would default to `DOUBLE` in the database 
     * unless we explicitly specify it as `DECIMAL`.
     * 
     * - A `String` attribute might need to be mapped to a `DATE` column type in the database.
     * 
     * - A column established as NOT NULL in the database scheme has to have the nullable 
     * boolean attribute set to `false`. 
     */

    // Constructors
    public Game() {
    }

    public Game(String title, String genre, String developer, String releaseDate, 
                double price, double leasePrice, String description) {
        // gameId will be set automatically because of the database's AUTOINCREMENT
        this.title = title;
        this.genre = genre;
        this.developer = developer;
        this.releaseDate = releaseDate;
        this.price = price;
        this.leasePrice = leasePrice;
        this.description = description;
    }

    // Getters and Setters
    /**
     * @return the gameId
     */
    public int getGameId() {
        return gameId;
    }

    /**
     * @param gameId the gameId to set
     */
    public void setGameId(int gameId) {
        this.gameId = gameId;
    }

    /**
     * @return the title
     */
    public String getTitle() {
        return title;
    }

    /**
     * @param title the title to set
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * @return the genre
     */
    public String getGenre() {
        return genre;
    }

    /**
     * @param genre the genre to set
     */
    public void setGenre(String genre) {
        this.genre = genre;
    }

    /**
     * @return the developer
     */
    public String getDeveloper() {
        return developer;
    }

    /**
     * @param developer the developer to set
     */
    public void setDeveloper(String developer) {
        this.developer = developer;
    }

    /**
     * @return the releaseDate
     */
    public String getReleaseDate() {
        return releaseDate;
    }

    /**
     * @param releaseDate the releaseDate to set
     */
    public void setReleaseDate(String releaseDate) {
        this.releaseDate = releaseDate;
    }

    /**
     * @return the price
     */
    public double getPrice() {
        return price;
    }

    /**
     * @param price the price to set
     */
    public void setPrice(double price) {
        this.price = price;
    }

    /**
     * @return the leasePrice
     */
    public double getLeasePrice() {
        return leasePrice;
    }

    /**
     * @param leasePrice the leasePrice to set
     */
    public void setLeasePrice(double leasePrice) {
        this.leasePrice = leasePrice;
    }

    /**
     * @return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }

}
